---
title: "Conversion and reactor sizing"
format: revealjs
date-modified: 2024-05-10
---

```{python}
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import scipy.interpolate as interpolate
import scipy.integrate as integrate
import tabulate as tab
from IPython.display import display, Markdown
plt.style.use('../../../assets/templates/present.mpstyle')
```

## Is this a reactor

::: {.r-stack}

![](../../../assets/images/is-this-a-reactor-1.png){.fragment .current-visible .absolute top=50 right=50 width=90%}
![](../../../assets/images/is-this-a-reactor-2.png){.fragment .current-visible .absolute top=50 right=50 width=90%}
![](../../../assets/images/is-this-a-reactor-3.png){.fragment .current-visible .absolute top=50 right=50 width=90%}
![](../../../assets/images/is-this-a-reactor-4.png){.fragment .current-visible .absolute top=50 right=50 width=90%}
![](../../../assets/images/is-this-a-reactor-5.png){.fragment .current-visible .absolute top=50 right=50 width=90%}
![](../../../assets/images/is-this-a-reactor-6.png){.fragment .current-visible .absolute top=50 right=50 width=90%}
![](../../../assets/images/is-this-a-reactor-7.png){.fragment .current-visible .absolute top=50 right=50 width=90%}
![](../../../assets/images/is-this-a-reactor-8.png){.fragment .current-visible .absolute top=50 right=50 width=90%}
![](../../../assets/images/is-this-a-reactor-9.png){.fragment .current-visible .absolute top=50 right=50 width=90%}
![](../../../assets/images/is-this-a-reactor-10.png){.fragment .current-visible .absolute top=50 right=50 width=90%}
![](../../../assets/images/is-this-a-reactor-11.png){.fragment .current-visible .absolute top=50 right=50 width=90%}
![](../../../assets/images/is-this-a-reactor-12.png){.fragment .current-visible .absolute top=50 right=50 width=90%}
![](../../../assets/images/is-this-a-reactor-13.png){.fragment .current-visible .absolute top=50 right=50 width=90%}
![](../../../assets/images/is-this-a-reactor-14.png){.fragment .current-visible .absolute top=50 right=50 width=90%}

:::

## Review - general mole balance

![](../../../assets/images/mole_balance.png){width=80%}


:::{.pad .incremental}

* General form: $F_{j0} - F_j  + G_j =  \frac{dN_j}{dt}$

* Uniform generation
  $$
  F_{j0} - F_j + r_j V =  \frac{dN_j}{dt}
  $$


* Non-uniform generation
  $$
  F_{j0} - F_j + \int^V r_j dV =  \frac{dN_j}{dt}
  $$

:::

## Reactor mole balance


::: {.columns}
:::: {.column width="100%"}

:::{style="margin-bottom: 40px;"}
:::

:::{.pad}

| Reactor | Differential form | Algebraic form | Integral form |
|:--------|:------------------|:---------------|:--------------|
| Batch | $$ \frac{dN_A}{dt} = r_AV $$|| $$ t = \int_{N_{A0}}^{N_A} \frac{dN_A}{r_A V}$$|
| CSTR | | $$V = \frac{F_{A0} - F_A}{-r_A} $$ | |
| PFR | $$ \frac{dF_A}{dV} = r_A $$|| $$ V = \int_{F_{A0}}^{F_A} \frac{dF_A}{r_A}$$|
| PBR | $$ \frac{dF_A}{dW} = r'_A $$|| $$ W = \int_{F_{A0}}^{F_A} \frac{dN_A}{r'_A}$$|

:::

::::
:::


## Conversion, $X$

:::{.incremental}

* Conversion is convenient for relating: $r_j, V, \upsilon, N_j, F_j,  \text{and } C_j$

* Consider the generic reaction

  $$ \ce{a A + b B -> c C + d D}$$

* Choose limiting reactant A as basis of calculation and normalize

  $$ \ce{ A + \frac{b}{a} B -> \frac{c}{a} C + \frac{d}{a} D}$$

* :::{.highlight}
  **Conversion (X)**: The fraction or percentage of a reactant that is consumed
  during a chemical reaction.
  :::
  $$ 
  X = \frac{\text{moles of A reacted}}{\text{moles of A fed}}
  $$

* **Batch system**: “Moles A fed” is the amount of A at the start of the reactor (t=0)
  **Flow system**: “Moles A fed” is the amount of A entering the reactor

:::

## Conversion, $X$

:::{.pad}
Consider $\ce{A + 2B -> 2C}$, Start with 1 mole of A, and 1 mole of B
:::

::::{.columns}

:::{.column .fragment width=45%}

### A is the basis:

At the end we have

:::{.incremental}
* 1 mole A, 1 mole B 
  
  $X_A = 0/1 = 0$ 
  $\Rightarrow \text{no reaction}$

* $\frac{1}{2}$ mole A, 0 mole B 

  $X_A = 0.5/1 = 1/2 (0.5)$ 


* 0 mole A, [-1 mole B]{.highlight}

  $X_A = 1/1 = 1$ 
  $\Rightarrow \text{complete reaction, but not possible}$

:::

:::
:::{.column width=10%}
:::

:::{.column .fragment width=45%}

### B is the basis:

At the end we have

:::{.incremental}
* 1 mole A, 1 mole B 
  
  $X_B = 0/1 = 0$ 
  $\Rightarrow \text{no reaction}$

* $\frac{1}{2}$ mole A, 0 mole B 

  $X_B = 1/1 = 1$ 
  $\Rightarrow \text{complete reaction}$

:::


:::
::::

::: {.callout-note .fragment appearance="simple"}

Pick the limiting reagent as the basis to calculate conversion

:::


## Moles and molar flow rate in terms of $X_A$

:::{.highlight}

$$ 
\ce{ A + \frac{b}{a} B -> \frac{c}{a} C + \frac{d}{a} D}
\qquad \qquad
X = \frac{\text{moles of A reacted}}{\text{moles of A fed}}
$$

:::

:::{.incremental}

* **Batch systems**: Longer reactant is in reactor, more reactant is converted
  to product (until reactant is consumed or the reaction reaches equilibrium)

  $$N_A = N_{A0} - N_{A0} X_A$$

  $$N_A = N_{A0}( 1 - X_A)$$

* **Flow systems**: For a given flow rate, the larger the reactor, the more
  time it takes the reactant to pass through the reactor, the more time to
  react 

  $$F_A = F_{A0} - F_{A0} X_A$$

  $$F_A = F_{A0}( 1 - X_A)$$

:::

## Design equation in terms of $X$: Batch reactor

::::{.columns}

:::{.column width=55%}


:::{.incremental}

* Ideal batch reactor design equation

  $$
  \frac{dN_A}{dt}=r_A V
  $$

* $$N_A = N_{A0}( 1 - X_A)$$

* Taking the derivative of $N_A$ equation

  $$
  \frac{d}{dt}N_A = \frac{d}{dt}\left( N_{A0}(1 - X_A)\right)
  $$

  $$
  \frac{dN_A}{dt} = 0 - N_{A0}\frac{dX_A}{dt}
  $$

* Substituting

  :::{.highlight}
  $$
  N_{A0} \frac{dX_A}{dt} = -r_A V
  $$
  :::
:::


:::
:::{.column width=5%}
:::


:::{.column width=40%}
![](../../../assets/images/mole_balance_batch_reactor.png){width=70%}

:::{.fragment .absolute top=650}

:::{.highlight}
$$
t = N_{A0} \int_0^{X_A}\frac{dX_A}{-r_A V}
$$
:::

:::
:::
::::

## In class exercise 

Derive Design equation for a CSTR in terms of $X$. 

![](../../../assets/images/mole_balance_cstr.png){width=90%}

## Design equation in terms of $X$: CSTR

::::{.columns}
:::{.column width=50%}

:::{.incremental}

* Ideal steady state CSTR design equation
 
  $$
  V = \frac{F_{A0}-F_A}{-r_A}
  $$

* Substitute for $F_A$

  $$F_A = F_{A0}( 1 - X_A)$$

  $$
  V = \frac{\cancel{F_{A0}} - \left[ \cancel{F_{A0}} - F_{A0} X_A \right]}{-r_A}
  $$


* :::{.highlight}
  $$
  V = \frac{F_{A0} X_A}{-r_A}
  $$
  :::

:::
 
:::
:::{.column width=5%}
:::

:::{.column width=45%}

![](../../../assets/images/mole_balance_cstr.png){width=90%}

:::
::::

::: {.callout-note .fragment appearance="simple"}

$V$ is the CSTR volume required to achieve a specified conversion. $X_A$ and
$–r_A$ are evaluated at the exit of the CSTR 

:::

## In class exercise 

Derive Design equation for a PFR in terms of $X$. 

![](../../../assets/images/mole_balance_pbr.png){width=90%}

## Design equation in terms of $X$: PFR

:::{.incremental}

* Ideal steady state PFR design equation
 
  $$
  \frac{dF_A}{dV} =r_A
  $$

* $$F_A = F_{A0}( 1 - X_A)$$

* Taking the derivative of $F_A$ equation

  $$
  \frac{d}{dV}F_A = \frac{d}{dV}\left( F_{A0}(1 - X_A)\right)  
 $$

  $$
  \frac{dF_A}{dV} = 0 - F_{A0}\frac{dX_A}{dV}
  \qquad \Rightarrow \qquad 
  \frac{dF_A}{dV} = - F_{A0}\frac{dX_A}{dV}
  $$

* Substituting

  :::{.highlight}
  $$
  F_{A0} \frac{dX_A}{dV} = -r_A 
  \qquad \Rightarrow \qquad 
  V  = F_{A0} \int_0^{X_A} \frac{dX_A}{-r_A}
  $$
  :::
:::
 

## Design equation in terms of $X$: PBR


::::{.columns}

:::{.column width=35%}

![](../../../assets/images/mole_balance_pbr.png){width=90%}

:::
:::{.column width=5%}
:::


:::{.column width=60%}

 
* Ideal steady state PBR design equation
 
  $$
  \frac{dF_A}{dW} =r'_A
  $$

* $$F_A = F_{A0}( 1 - X_A)$$

* Taking the derivative of $F_A$ equation

  $$
  \frac{d}{dW}F_A = \frac{d}{dW}\left( F_{A0}(1 - X_A)\right)  
  $$

  $$
  \frac{dF_A}{dW} = - F_{A0}\frac{dX_A}{dW}
  $$

* Substituting

  :::{.highlight}
  $$
  F_{A0} \frac{dX_A}{dW} = -r'_A 
  \Rightarrow
  W  = F_{A0} \int_0^{X_A} \frac{dX_A}{-r'_A}
  $$
  :::
:::
 

:::
::::

## Reactor mole balance in terms of $X$


::: {.columns}
:::: {.column width="100%"}

:::{style="margin-bottom: 40px;"}
:::

:::{.pad}

| Reactor | Differential form | Algebraic form | Integral form |
|:--------|:------------------|:---------------|:--------------|
| Batch | $$ N_{A0}\frac{dX}{dt} = r_AV $$|| $$ t = N_{A0}\int_0^{X} \frac{dX}{r_A V}$$|
| CSTR | | $$V = \frac{F_{A0}X}{-r_A} $$ | |
| PFR | $$ F_{A0}\frac{dX}{dV} = -r_A $$|| $$ V = F_{A0} \int_{0}^{X} \frac{dX}{-r_A}$$|
| PBR | $$ F_{A0}\frac{dX}{dW} = -r'_A $$|| $$ W = F_{A0} \int_{0}^{X} \frac{dX}{-r'_A}$$|
||||||

:::

::::
:::

## Sizing of continuous flow reactors

:::{.incremental}

* Sizing refers to either of

  - Determining reactor volume for specified conversion
  - Determining conversion for a specified volume 

* For All irreversible reactions of order greater than 0, As we approach
  complete conversion, the reciprocal rate approaches infinity

:::

:::{.fragment}

::::{.columns}
:::{.column width=50%}

![](../../../assets/images/reactor-volume-rate-and-conversion-01.png){width=70%}

:::

:::{.column width=50%}

* Irreversible reaction: 

  As $X \rightarrow 1 ; -r_A \rightarrow 0$

* Reversible reaction: 
  
  As $X \rightarrow X_e ; -r_A \rightarrow 0$

$$
\Rightarrow \frac{1}{-r_A} \rightarrow \infty \therefore V \rightarrow \infty 
$$

:::
::::

:::

::: {.callout-note .fragment appearance="simple"}

Infinite reactor volume is necessary to reach complete conversion

:::


## Sizing of continuous flow reactors

<!-- TODO: replace CSTR image by consistently drawn ones.  -->
<!-- TODO: replace PFR image by consistently drawn ones.  -->

::::{.columns}
:::{.column .fragment width=50%}

### CSTR

$$
V = \left( \frac{F_{A0}}{(-r_A)_{exit}} \right) \cdot X 
$$


![](../../../assets/images/levenspeil-plot-cstr.png){width=90%}


:::{.highlight .smaller}
CSTR volume

area of rectangle bound by $X_A$ and $\frac{F_{A0}}{-r_{A, exit}}$
:::

:::

:::{.column .fragment width=50%}

### PFR


$$
V = \int_0^X \left( \frac{F_{A0}}{(-r_A)}\right) dX
$$

![](../../../assets/images/levenspeil-plot-pfr.png){width=90%}

:::{.highlight .smaller}
PFR volume

area under the curve $\frac{F_{A0}}{-r_{A}} = f(X_A)$
:::

:::
::::


## Levenspiel plots - reactor sizing

<!-- TODO: replace cstr-levenspeil-2.png by consistently drawn one.  -->
<!-- TODO: replace pfr-levenspeil-2.png by consistently drawn one.  -->


:::{.incremental}

* Given $–r_A$ as a function of conversion, $-r_A= f(X)$, one can size any type
  of reactor.

* We do this by constructing a Levenspiel plot.

* Here we plot either $\frac{F_{A0}}{-r_A}$ or $\frac{1}{-r_A}$ as a function of $X$.

:::

:::{r-stack}

![](../../../assets/images/cstr-levenspeil-2.png){.fragment .current-visible .absolute top=300 right=50 width=90%}
![](../../../assets/images/pfr-levenspeil-2.png){.fragment .absolute top=300 right=50 width=90%}

:::

## In class exercise: CSTR sizing

Using following data: Calculate $V_{CSTR}$ for $X = 0.4$, and $X = 0.8$

:::{style="margin-bottom: 40px;"}
:::


```{python}
data = np.array([
    (0, 0.89), (0.1, 1.08), (0.2, 1.33), (0.4, 2.05), (0.6, 3.56),
    (0.7, 5.06), (0.8, 8)
], dtype=[('x', float), ('fa0_by_ra', float)])

# Interpolate using cubic spline 
data_interp = interpolate.CubicSpline(data['x'], data['fa0_by_ra'])

df = {}
df['data'] = pd.DataFrame({'X': data['x'], '$\\frac{F_{A0}}{-r_A}$': data['fa0_by_ra']})

md = tab.tabulate(df['data'].T, floatfmt='.2f')
display(Markdown(md))

# data_for_table = [(row['x'], row['fa0_by_ra']) for row in data]
# headers = ["X", "$\\frac{F_{A0}}{-r_A}$"]
# md = tab.tabulate(data_for_table, headers=headers, floatfmt='.2f')
# display(Markdown(md))
```


## CSTR sizing

Using following data: Calculate $V_{CSTR}$ for $X = 0.4$, and $X = 0.8$

:::{style="margin-bottom: 40px;"}
:::


```{python}
data = np.array([
    (0, 0.89), (0.1, 1.08), (0.2, 1.33), (0.4, 2.05), (0.6, 3.56),
    (0.7, 5.06), (0.8, 8)
], dtype=[('x', float), ('fa0_by_ra', float)])

# Interpolate using cubic spline 
data_interp = interpolate.CubicSpline(data['x'], data['fa0_by_ra'])

df = {}
df['data'] = pd.DataFrame({'X': data['x'], '$\\frac{F_{A0}}{-r_A}$': data['fa0_by_ra']})

md = tab.tabulate(df['data'].T, floatfmt='.2f')
display(Markdown(md))

# data_for_table = [(row['x'], row['fa0_by_ra']) for row in data]
# headers = ["X", "$\\frac{F_{A0}}{-r_A}$"]
# md = tab.tabulate(data_for_table, headers=headers, floatfmt='.2f')
# display(Markdown(md))
```

:::{style="margin-bottom: 40px;"}
:::

::::{.columns}
:::{.column width=60%}

```{python}
#| echo: false 
#| output: true 

fig,ax = plt.subplots(figsize=(6, 6))

x = np.linspace(0, 0.8, 100)
fa0_by_ra = data_interp(x)

# calculate volumes

# X = 0.4
x_p4 = 0.4
fa0_by_ra_p4 = float(data_interp(x_p4))
v_p4 = x_p4 * fa0_by_ra_p4

# X = 0.8
x_p8 = 0.8
fa0_by_ra_p8 = float(data_interp(x_p8))
v_p8 = x_p8 * fa0_by_ra_p8

ax.scatter(data['x'], data['fa0_by_ra'], marker='s', color='red')
ax.plot(x, fa0_by_ra, color='black')

# CSTR X = 0.4
rectangle = plt.Rectangle((0, 0), x_p4, fa0_by_ra_p4, color='skyblue', alpha=0.8)
ax.add_patch(rectangle)

text_str = r"""$V_{{X={x:.2f}}}$ = {v:.2f} $m^3$""".format(x=x_p4,v=v_p4)
ax.text(x_p4/2, 0.5, text_str, ha='center', va='bottom')

# CSTR X = 0.8
rectangle = plt.Rectangle((0, 0), x_p8, fa0_by_ra_p8, color='lightcoral', alpha=0.4)
ax.add_patch(rectangle)

text_str = r"""$V_{{X={x:.2f}}}$ = {v:.2f} $m^3$""".format(x=x_p8,v=v_p8)
ax.text(x_p8/2, 7, text_str, ha='center', va='bottom')


ax.set_xlabel('Conversion X')
ax.set_ylabel('$\\frac{F_{A0}}{-r_A} (m^3)$')

# Setting x and y axis limits
ax.set_xlim(0, 1)
ax.set_ylim(0, 10)

plt.show()

```
:::

:::{.column width=40%}

$$
V = \left( \frac{F_{A0}}{(-r_A)_{exit}} \right) \cdot X 
$$

* For $X$ = `{python} x_p4`; 
  $\frac{F_{A0}}{(-r_A)_{exit}}$ = 
  `{python} f'{fa0_by_ra_p4:.2f}'` $m^3$

  $V$ = `{python} v_p4` $m^3$ 

* For $X$ = `{python} x_p8`; 
  $\frac{F_{A0}}{(-r_A)_{exit}}$ = 
  `{python} f"{fa0_by_ra_p8:.2f}"` $m^3$

  $V$ = `{python} v_p8` $m^3$ 


:::
::::

## In class exercise: PFR sizing

Using following data: Calculate $V_{PFR}$ for $X = 0.4$, and $X = 0.8$

:::{style="margin-bottom: 40px;"}
:::

```{python}
data = np.array([
    (0, 0.89), (0.1, 1.08), (0.2, 1.33), (0.4, 2.05), (0.6, 3.56),
    (0.7, 5.06), (0.8, 8)
], dtype=[('x', float), ('fa0_by_ra', float)])

# Interpolate using cubic spline 
data_interp = interpolate.CubicSpline(data['x'], data['fa0_by_ra'])

df = {}
df['data'] = pd.DataFrame({'X': data['x'], '$\\frac{F_{A0}}{-r_A}$': data['fa0_by_ra']})

md = tab.tabulate(df['data'].T, floatfmt='.2f')
display(Markdown(md))

# data_for_table = [(row['x'], row['fa0_by_ra']) for row in data]
# headers = ["X", "$\\frac{F_{A0}}{-r_A}$"]
# md = tab.tabulate(data_for_table, headers=headers, floatfmt='.2f')
# display(Markdown(md))
```



## PFR sizing

Using following data: Calculate $V_{PFR}$ for $X = 0.4$, and $X = 0.8$

:::{style="margin-bottom: 40px;"}
:::

```{python}
data = np.array([
    (0, 0.89), (0.1, 1.08), (0.2, 1.33), (0.4, 2.05), (0.6, 3.56),
    (0.7, 5.06), (0.8, 8)
], dtype=[('x', float), ('fa0_by_ra', float)])

# Interpolate using cubic spline 
data_interp = interpolate.CubicSpline(data['x'], data['fa0_by_ra'])

df = {}
df['data'] = pd.DataFrame({'X': data['x'], '$\\frac{F_{A0}}{-r_A}$': data['fa0_by_ra']})

md = tab.tabulate(df['data'].T, floatfmt='.2f')
display(Markdown(md))

# data_for_table = [(row['x'], row['fa0_by_ra']) for row in data]
# headers = ["X", "$\\frac{F_{A0}}{-r_A}$"]
# md = tab.tabulate(data_for_table, headers=headers, floatfmt='.2f')
# display(Markdown(md))
```

:::{style="margin-bottom: 40px;"}
:::

::::{.columns}
:::{.column width=60%}

```{python}
#| echo: false 
#| output: true 

fig,ax = plt.subplots(figsize=(6, 6))

x = np.linspace(0, 0.8, 100)
fa0_by_ra = data_interp(x)

# calculate volumes

# X = 0.4
x_p4 = 0.4
v_p4, err = integrate.quad(data_interp, 0, x_p4)

# X = 0.8
x_p8 = 0.8
v_p8, err = integrate.quad(data_interp, 0, x_p8)

ax.scatter(data['x'], data['fa0_by_ra'], marker='s', color='red')
ax.plot(x, fa0_by_ra, color='black')

# PFR X = 0.4
# Fill the area under the curve between 0 and 0.4
x_fill = np.linspace(0, x_p4, 100)
y_fill = data_interp(x_fill)
ax.fill_between(x_fill, y_fill, color='skyblue', alpha=0.8)

text_str = r"""$V_{{X={x:.2f}}}$ = {v:.2f} $m^3$""".format(x=x_p4,v=v_p4)
ax.text(x_p4/2, 0.5, text_str, ha='center', va='bottom')

# PFR X = 0.8
# Fill the area under the curve between 0 and 0.8
x_fill = np.linspace(0, x_p8, 100)
y_fill = data_interp(x_fill)
ax.fill_between(x_fill, y_fill, color='lightcoral', alpha=0.4)

text_str = r"""$V_{{X={x:.2f}}}$ = {v:.2f} $m^3$""".format(x=x_p8,v=v_p8)
ax.text(0.6, 0.5, text_str, ha='center', va='bottom')


ax.set_xlabel('Conversion X')
ax.set_ylabel('$\\frac{F_{A0}}{-r_A} (m^3)$')

# Setting x and y axis limits
ax.set_xlim(0, 1)
ax.set_ylim(0, 10)

plt.show()

```
:::

:::{.column width=40%}

$$
V = \int_0^X \left( \frac{F_{A0}}{(-r_A)}\right) dX
$$

* For $X$ = `{python} x_p4`; 
  Numerically integrate the data

  $V$ = `{python} f'{v_p4:.2f}'` $m^3$

* For $X$ = `{python} x_p8`; 
  $\frac{F_{A0}}{(-r_A)_{exit}}$ = 
  `{python} f'{fa0_by_ra_p8:.2f}'` $m^3$

  $V$ = `{python} f'{v_p8:.2f}'` $m^3$

:::
::::



## Reactors in series

:::{.incremental}

* Reactors are arranged sequentially, with the output of one reactor feeding
  directly into the next.

* Advantages: 

  - Achieve higher overall conversion rates
  - Handle reactions requiring different conditions at different stages.
  - Different reaction conditions can be optimized in each reactor. 
  - **Staging**: Allows for the introduction of intermediates or the removal of
    by-products between stages.

* Both Continuous Stirred Tank Reactors (CSTRs) and Plug Flow Reactors (PFRs)
  can be configured in series, either separately or in a mixed arrangement, to
  optimize reaction conditions and efficiencies.

* Key Considerations
  - Reactor volume and design optimization
  - Maintenance and operational complexity

:::

::: {.callout-note .fragment appearance="simple"}

Levenspiel plots can be used to visualize and sequence reactors in series.  

:::

## Reactors in series

![](../../../assets/images/reactors_in_series_schematic.png){width=90%}

:::{.fragment}

* In absence of any side streams (inlets or outlets)

  Conversion up to point $i$:

  $$
  X_i = \frac{\text{total moles of A reacted up to point } i }{\text{Moles A
  fed into } 1^{st} \text{ reactor}} 
  $$

* Molar Flow rate of species A at point $i$:

  $$
  F_{Ai} = F_{A0} - F_{A0} X_i
  $$

:::

## Reactors in series

### Example: An adiabatic liquid-phase isomerization

The isomerization of butane

$$
\ce{n-C4H10 <=> i-C4H10}
$$

was carried out adiabatically in the liquid phase. The data for this reversible
reaction are given below. Calculate the volume of each of the reactors for an entering
molar flow rate of n-butane of 50 kmol/hr.

:::{style="margin-bottom: 30px;"}
:::

```{python}
#| echo: false 
#| output: true 

x_data = [0.0, 0.2, 0.4, 0.6, 0.65]
y_data = [39, 53, 59, 38, 25]

data4 = np.array(list(zip(x_data, y_data)), dtype=[('x', float), ('ra', float)])

Fa0 = 50
Fa0_by_ra = Fa0/data4['ra']

data4_interp = interpolate.CubicSpline(data4['x'], Fa0_by_ra)

df = {}
df['data'] = pd.DataFrame({'X': data4['x'], '$-r_A, \\frac{kmol}{m^3 \\cdot h}$': data4['ra']})

md = tab.tabulate(df['data'].T, floatfmt='.2f')
display(Markdown(md))

```

:::{style="margin-bottom: 30px;"}
:::

![](../../../assets/images/02-in-class-p4.png){width=90%}

## Reactors in series

### Example: An adiabatic liquid-phase isomerization

```{python}
fig,ax = plt.subplots(figsize=(9, 9))

x = np.linspace(0, 0.8, 100)
y = data4_interp(x)

# calculate volumes

# CSTR X1 = 0.2

x_1 = 0.2
v_cstr_1 = x_1 * float(data4_interp(x_1))

# PFR X2 = 0.6
x_2 = 0.6
v_pfr, err = integrate.quad(data4_interp, x_1, x_2)

# CSTR X3 = 0.65

x_3 = 0.65
v_cstr_2 = (x_3 - x_1) * float(data4_interp(x_3))

ax.scatter(data4['x'], Fa0_by_ra, marker='s', color='red')
ax.plot(x, y, color='black')

# CSTR 1 X = 0.2
rectangle = plt.Rectangle((0, 0), x_1, float(data4_interp(x_1)), color='skyblue', alpha=0.4)
ax.add_patch(rectangle)

text_str = r"""$V_{{X={x:.2f}}}$ = {v:.2f} $m^3$""".format(x=x_1,v=v_cstr_1)
ax.text(0.2, 1.35, text_str, ha='center', va='bottom')
ax.arrow(0.1, 1.3, 0, -0.5, head_width=0.02, head_length=0.1, fc='k')

# PFR X = 0.6
# Fill the area under the curve between 0.2 and 0.6
x_fill = np.linspace(x_1, x_2, 100)
y_fill = data4_interp(x_fill)
ax.fill_between(x_fill, y_fill, color='lightcoral', alpha=0.4)

text_str = r"""$V_{{X={x:.2f}}}$ = {v:.2f} $m^3$""".format(x=x_2,v=v_pfr)
ax.text(0.4, 0.25, text_str, ha='center', va='bottom')

# CSTR 2 X = 0.65
rectangle = plt.Rectangle((x_2, 0), x_3 - x_2, float(data4_interp(x_3)), color='forestgreen', alpha=0.4)
ax.add_patch(rectangle)

text_str = r"""$V_{{X={x:.2f}}}$ = {v:.2f} $m^3$""".format(x=x_3,v=v_cstr_2)
ax.text(0.50, 2.25, text_str, ha='center', va='bottom')
ax.arrow(0.62, 2.2, 0, -0.2, head_width=0.01, head_length=0.05, fc='k')

ax.set_xlabel('Conversion X')
ax.set_ylabel('$\\frac{F_{A0}}{-r_A} (m^3)$')

# Setting x and y axis limits
ax.set_xlim(0, 0.7)
ax.set_ylim(0, 2.5)

plt.show()

```

## Reactors in series


::::{.columns}

:::{.column width=45%}

![](../../../assets/images/reactors_in_series_schematic_cstr_pfr.png){width=90%}

:::
:::{.column width=5%}
:::


:::{.column width=50%}

* If $\frac{F_{A0}}{-r_A}$ monotonically increases with $X$

:::{.smaller}
  $$
  V_{\text{one PFR}} \leq \sum_i V_{\text{PFR(i)}} + \sum_j V_{\text{CSTR(j)}} \leq V_{\text{one CSTR}} 
  $$
:::

  for any combination of PFRs and CSTRs in series

* In general

  1 PFR = any number of PFRs in series

	1 PFR = $\infty$ number of CSTRs in series

* For large number of CSTRs in series, the total volume is 'roughly' same as
  volume of PFR

:::

::::

::: {.callout-note .fragment appearance="simple"}

The concept of using CSTRs in series to model PFR is used in larger number of
situations such as modeling catalyst decay in packed bed reactors, or studying
transient heat effects in PFR. 

:::


## Space time ($\tau$)

* Time necessary to process one reactor volume, also called mean residence time or holding time

  $$
  \tau = \frac{V}{\upsilon_0}
  $$

* **Space velocity (SV)**: inverse of space time, but vo may be measured under
  different conditions than the space time

  $$
  SV = \frac{\upsilon_0}{V} = \frac{1}{\tau}
  $$

  - LHSV: Liquid hourly space velocity: $\mathrm{LHSV} =\frac{\upsilon_{0 \mid \mathrm{liquid}}}{V}$
  - GHSV: Gas hourly space velocity: $\mathrm{GHSV}=\frac{\upsilon_{0 \mid \mathrm{STP}}}{V}$
  - $\upsilon_{0 \mid}$ is the volumetric flow rate measured at specified condition


