---
title: "Portfolio 02: Conversion and reactor sizing"
format:
  pdf
resources:
   - "./ethylene_oxide_rate_vs_conversion.csv"
last-modified: 2024-04-02
---

```{python}
import numpy as np
import pandas as pd
# import matplotlib
# from matplotlib.ticker import AutoMinorLocator
# import matplotlib.pyplot as plt
# from scipy import stats
import scipy.interpolate as interpolate
import scipy.integrate as integrate
# from tabulate import tabulate
from IPython.display import display, Markdown
plt.style.use('../../../assets/templates/publish.mplstyle')
```

```{python}
# Function to calculate the volume of CSTR for given conversion
def CSTR_volume_from_conversion(f, x_start=0, x_end=0.99, *args):
  fa0_by_ra_exit = f(x_end,*args)
  v = (x_end - x_start)*fa0_by_ra_exit
  return v

# Function to calculate the volume of PFR for given conversion
def PFR_volume_from_conversion(f, x_start=0, x_end=0.99,*args):
  v, _ = integrate.quad(f, x_start, x_end,args=args)
  return v

# Function to calculate the conversion in a CSTR for given volume
def CSTR_conversion_from_volume(f, v, x_start=0, x_end=1, steps=1000,*args):
   for x in np.linspace(x_start, x_end, steps):
      # Avoid division by zero
      if x == x_start:
         continue

      fa0_by_ra_target = v/ (x-x_start)
      fa0_by_ra_actual = f(x,*args)

      if fa0_by_ra_target <= fa0_by_ra_actual:
         return x, fa0_by_ra_target

   # If no valid volume is found within given range, return None.
   return None, None

# Function to calculate the conversion in a PFR for a given volume
def PFR_conversion_from_volume(f, v, x_start=0, x_end=1, steps=1000,*args):

   for x in np.linspace(x_start, x_end, steps):

      # Avoid division by zero
      if x == x_start:
         continue

      fa0_by_ra_actual = f(x,*args)
      actual_volume, err = integrate.quad(f, x_start, x,args=args)

      if actual_volume >= v:
         return x, fa0_by_ra_actual

   # If no valid volume is found within given range, return None.
   return None, None
```

::: {.callout-note}
## Solutions

Answers to the portfolio questions are uploaded at [Portfolio 2 answers](./portfolio-02-answers.qmd)

:::


## General Instructions for in class Portfolios

1.  The portolio is an open-book task.
2.  You can use textbooks, the resources provided during class/ workshop etc.
    to answer the questions. 
3.  The portfolio task is made available in both pdf format and as a print. 
4.  You are free to choose a solution technique. It is **not** required that
    you use the provided python code to answer the questions. You can use any
    tool (pen and paper, excel, ... ) and any technique (graphical, numerical,
    analytical) that you are comfortable with. 
5.  Irrespective of your solution method, you are expected to write your
    answers on to the printed question paper provided. **This is what gets
    marked.**
6.  The portfolio will take place during designated timeslot communicated
    earlier by the unit coordinator. Please refer to the portfolio schedule on
    blackboard for the portolio dates and topics. 
7.  The tasks will be a mix of theory questions, short calculation type and
    long numerical examples.
8.  You have **30 minutes** to complete the tasks in the portfolio. 
9.  The portolios will be marked immediately after completion by your peers
    using a provided marking rubric.
10. The portfolios will be collected by the instructors to verify peer marking
    and record the marks. You will receive your portolio back within a week. 
11. When you are required to upload the portolio answers on to blackboard: 
    - Save your report as a pdf file. 
    - Rename the file as STUDENTID_Portfolio_x.pdf (Where STUDENTID is your
      student ID, and x is the portfolio number) and 
    - Upload it using assessment submission link on blackboard. 

{{< pagebreak >}}

## Academic Integrity

Academic integrity at its core is about honesty and responsibility and is
fundamental to Curtin’s expectations of you. This means that all of your work
at Curtin should be your own and it should be underpinned by integrity, which
means to act ethically, honestly and with fairness.

As a Curtin student you are part of an academic community and you are asked to
uphold the University’s [Code of
Conduct](https://oasis.curtin.edu.au/ConductAtCurtin), principles of academic
integrity, and [Curtin’s five core
values](https://about.curtin.edu.au/who/vision-mission-values/curtin-values/)
of integrity, respect, courage, excellence and impact during your studies.

You are also expected to uphold the [Student
Charter](https://students.curtin.edu.au/essentials/rights/student-charter/) and
recognise that cheating, plagiarism collusion, and falsification of data and
other forms of academic dishonesty are not acceptable.

For more information, visit
[https://students.curtin.edu.au/essentials/rights/academic-integrity/](https://students.curtin.edu.au/essentials/rights/academic-integrity/)

{{< pagebreak >}}

## Introduction

Ethylene oxide (EO) ($\ce{C2H4O}$), also known as oxirane, is a colorless,
flammable gas with a sweet, ether-like smell. EO is an important industrial
chemical used primarily to make ethylene glycol (a key ingredient in antifreeze
and polyester fiber) and other chemicals, such as surfactants, detergents, and
solvents.

In 2022, global production of EO was nearly 28 millions of tons and s expected
to grow at a steady CAGR of 4.07% during the forecast period until 2032. With a
selling price of $1913 per tonne, the commercial value of EO is around $53
billion.

The primary route for EO production involves the direct vapor phase oxidation
of ethylene in the presence of a silver catalyst: 

$$
\ce{C2H4 + 1/2 O2 -> C2H4O}
$$

This reaction is highly exothermic and requires careful control to manage the
risk of runaway reactions. The process typically involves a recovery stage to
separate EO from water and other byproducts.

We want to design a reactor achieve a desired conversion of ethylene. Ethylene
and oxygen are fed in stoichiometric proportions to a packed-bed reactor
operated isothermally at 260 $^\circ C$.

```{python}

rate_file = './ethylene_oxide_rate_vs_conversion.csv'
rate_data = np.genfromtxt(rate_file, delimiter=',', dtype=[('x', float), ('ra', float)], skip_header=1)

x = rate_data['x']
minus_ra = rate_data['ra']

fa0 = 0.1362

fa0_by_minus_ra = fa0/minus_ra

data_interp = interpolate.CubicSpline(x, fa0_by_minus_ra)
```
In order to aid reactor design, laboratory experiments were performed to
determine reaction rate at various ethylene conversions. The reaction rate vs.
conversion data (@tbl-1) is also provided in csv file
[ethylene_oxide_rate_vs_conversion.csv](./ethylene_oxide_rate_vs_conversion.csv).
The data is plotted in @fig-1. 

```{python}
#| echo: false
#| label: tbl-1
#| tbl-cap: Reaction rate vs. conversion data

df = pd.DataFrame({'X': x, 'RA': minus_ra})
df.columns = ['$X$', '$-r_A (mol/ kg-cat \ s)$']

# Convert the DataFrame to a markdown table string
markdown_table = df.to_markdown(index=False)

Markdown(markdown_table)

```

:::{.callout-note}
## Skeleton code

Skeleton code useful for solving the questions in this portolio is provided in
a [Google colaboratory
notebook](https://colab.research.google.com/drive/1dTV_NMAOV225pwqtCur-x2OFHCutsiTs?usp=sharing)

:::


{{< pagebreak >}}

## Question 1 \hfill (5 marks)

We want to achieve 60% conversion of ethylene. What kind of reactor would you
suggest? Why? 

```{python}
#| label: fig-1
#| fig-cap: Rate data for oxidation of ethylene

fig,ax = plt.subplots()

ax.scatter(x, minus_ra, marker='s', color='red')

ax.set_xlabel('Conversion X')
ax.set_ylabel('$-r_A \\left(\\frac{mol}{kg-cat \cdot s} \\right)$')

# Setting x and y axis limits
# ax.set_xlim(0, 1)
# ax.set_ylim(0, 0.007)

plt.show()

```

{{< pagebreak >}}

## Question 2 \hfill (5 marks)

Write correct mole balance equation(s) for flow reactors in terms of conversion of
ethylene.  

{{< pagebreak >}}

## Question 3 \hfill (10 marks)

Ethylene and oxygen are fed in stoichiometric proportions to a packed-bed
reactor operated isothermally at 260 $^\circ C$. Ethylene is fed at a rate of
136.21 mol/s at a pressure of 10 atm (1013 kPa). It is proposed to use 10 banks
of 25.4 mm diameter schedule 40 tubes packed with catalyst with 100 tubes per bank.
Consequently, the molar flow rate to each tube is to be 0.1362 mol/s. 

The properties of the reacting fluid are to be considered identical to those of
air at this temperature and pressure. The density of the 6.35 mm catalyst
particles is 1925 $kg/m^3$, the bed void fraction is 0.45, and the gas density
is 16 $kg/m^3$. 

Determine the weight of catalyst required to achieve 60% conversion.

```{python}
plt.figure(figsize=(10,10))
ax = plt.gca()

# Display major and minor gridlines
ax.grid(which='major', linestyle='-', linewidth='0.5', color='black')
ax.grid(which='minor', linestyle=':', linewidth='0.5', color='gray')

# Enable minor ticks to display minor gridlines
ax.minorticks_on()

ax.xaxis.set_minor_locator(AutoMinorLocator(10))
ax.yaxis.set_minor_locator(AutoMinorLocator(10))

# Hide axis numbers but keep the grid
ax.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax.tick_params(axis='y', which='both', left=False, right=False, labelleft=False)

# Show the plot
plt.show()

```

{{< pagebreak >}}

## Question 4 \hfill (10 marks)

To improve temperature control, the suggestion is to conduct the reaction using
two equally sized Continuous Stirred Tank Reactors (CSTRs) rather than a Packed
Bed Reactor (PBR).

To achieve this, we equally divide the catalyst weight obtained in question 3
in to two CSTRs and join the CSTRs in series. 

Calcualte the conversion attained at the end of second CSTR.  


```{python}
plt.figure(figsize=(10,10))
ax = plt.gca()

# Display major and minor gridlines
ax.grid(which='major', linestyle='-', linewidth='0.5', color='black')
ax.grid(which='minor', linestyle=':', linewidth='0.5', color='gray')

# Enable minor ticks to display minor gridlines
ax.minorticks_on()

ax.xaxis.set_minor_locator(AutoMinorLocator(10))
ax.yaxis.set_minor_locator(AutoMinorLocator(10))

# Hide axis numbers but keep the grid
ax.tick_params(axis='x', which='both', bottom=False, top=False, labelbottom=False)
ax.tick_params(axis='y', which='both', left=False, right=False, labelleft=False)

# Show the plot
plt.show()

```
{{< pagebreak >}}
